<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>PERT chart</title>
    <meta name="description" content="A PERT chart: a diagram for visualizing and analyzing task dependencies and bottlenecks." />
    <!-- Copyright 1998-2017 by Northwoods Software Corporation. -->
    <meta charset="UTF-8">
    @Scripts.Render("~/Scripts/go-1.7.11-debug.js")
    <script id="code">
  function init() {
    if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
    var $ = go.GraphObject.make;  // for more concise visual tree definitions
    // colors used, named for easier identification
    var blue = "#0288D1";
    var pink = "#B71C1C";
    var pinkfill = "#F8BBD0";
    var bluefill = "#B3E5FC";
    myDiagram =
      $(go.Diagram, "myDiagramDiv",
        {
          initialAutoScale: go.Diagram.Uniform,
          initialContentAlignment: go.Spot.Center,
          layout: $(go.LayeredDigraphLayout)
        });
    // The node template shows the activity name in the middle as well as
    // various statistics about the activity, all surrounded by a border.
    // The border's color is determined by the node data's ".critical" property.
    // Some information is not available as properties on the node data,
    // but must be computed -- we use converter functions for that.
    myDiagram.nodeTemplate =
      $(go.Node, "Auto",
        $(go.Shape, "Rectangle",  // the border
          { fill: "white", strokeWidth: 2, stroke: "pink"}),
          //new go.Binding("fill", "critical", function (b) { return (b ? pinkfill : bluefill ); }),
          //new go.Binding("stroke", "critical", function (b) { return (b ? pink : blue); })),
          $(go.TextBlock, // earlyStart
            new go.Binding("text", "text"),
            { margin: 5, textAlign: "center" })
      );  // end Node
    
    function linkColorConverter(linkdata, elt) {
      var link = elt.part;
      if (!link) return blue;
      var f = link.fromNode;
      if (!f || !f.data || !f.data.critical) return blue;
      var t = link.toNode;
      if (!t || !t.data || !t.data.critical) return blue;
      return pink;  // when both Link.fromNode.data.critical and Link.toNode.data.critical
    }
    // The color of a link (including its arrowhead) is red only when both
    // connected nodes have data that is ".critical"; otherwise it is blue.
    // This is computed by the binding converter function.
    myDiagram.linkTemplate =
      $(go.Link,
        { toShortLength: 6, toEndSegmentLength: 20 },
        $(go.Shape,
          { strokeWidth: 4 },
          new go.Binding("stroke", "", linkColorConverter)),
        $(go.Shape,  // arrowhead
          { toArrow: "Triangle", stroke: null, scale: 1.5 },
          new go.Binding("fill", "", linkColorConverter))
      );
    // here's the data defining the graph
    var nodeDataArray = [
      { key: 1, text: "Start" },
      { key: 2, text: "a", length: 4, earlyStart: 0, lateFinish: 4, critical: true },
      { key: 3, text: "b", length: 5.33, earlyStart: 0, lateFinish: 9.17, critical: false },
      { key: 4, text: "c", length: 5.17, earlyStart: 4, lateFinish: 9.17, critical: true },
      { key: 5, text: "d", length: 6.33, earlyStart: 4, lateFinish: 15.01, critical: false },
      { key: 6, text: "e", length: 5.17, earlyStart: 9.17, lateFinish: 14.34, critical: true },
      { key: 7, text: "f", length: 4.5, earlyStart: 10.33, lateFinish: 19.51, critical: false },
      { key: 8, text: "g", length: 5.17, earlyStart: 14.34, lateFinish: 19.51, critical: true },
      { key: 9, text: "Finish", length: 0, earlyStart: 19.51, lateFinish: 19.51, critical: true }
    ];
    var linkDataArray = [
      { from: 1, to: 3 },
      { from: 2, to: 4 },
      { from: 2, to: 5 },
      { from: 3, to: 6 },
      { from: 4, to: 6 },
      { from: 5, to: 7 },
      { from: 6, to: 8 },
      { from: 7, to: 9 },
      { from: 8, to: 9 },
      { from: 9, to: 1 },
      { from: 8, to: 1 }
    ];
    myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
    // create an unbound Part that acts as a "legend" for the diagram
  }
    </script>
</head>
<body onload="init()">
    <div id="sample">
        <div id="myDiagramDiv" style="border: solid 1px black; width:100%; height:400px"></div>
        <p>
            This sample demonstrates how to create a simple PERT chart. A PERT chart is a project management tool used to schedule and coordinate tasks within a project.
        </p>
        <p>
            The "critical" property on the activity data object controls whether the node is drawn with a red brush or a blue one.
            There is a special converter that is used to determine the brush used by the links.
        </p>
        <p>
            The light blue legend is implemented by a separate Part implemented in a manner similar to the Node template.
            However it is not bound to data -- there is no JavaScript object in the model representing the legend.
        </p>
    </div>
</body>
</html>